@startuml
actor "remoteDealerClient 10.146.11.75" as DC

box "DealerClient System" /' LightBlue '/
participant DealerClient as DL /' [dealerclient.py] '/
participant DealerFactory as DF /' [dealerfactory.py] '/
participant DealerProtocol as DP /' [dealerprotocol.py] '/
end box

box "Video Management" /' LightGreen '/
participant VideoManager as VM /' [videomanager.py] '/
end box

box "Detection System" /' LightYellow '/
participant Detector as DET /' [detector.py] '/
end box

box "Image Saving" /' LightOrange '/
participant ImageSaver as IS /' [imagesaver.py] '/
end box

box "Data Management" /' LightCyan '/
participant DataManager as DM /' [datamanager.py] '/
end box

== Connection Establishment ==
DC -> DL: connect(host, port)
DL -> DF: DealerFactory() /' Create factory instance '/
DF -> DP: buildProtocol() /' Create protocol instance '/

== Login and Session Initiation ==
DP -> DC: send cardmsg.PK_Login() to remote
DC -> DP: remote sends login message
DP -> DL: onLoginRet() /' Process login result '/

== Start Card Detection ==
DC -> DL: send StartPredict封包 to dealerClient /' Request to start detection '/
DL -> DM: onStartPredict(gmcode,gmstate) dealerClient處理封包訊息後丟入DataManagerInstance
DM -> VM: self.predictFlag = True /' Set predictFlag to True '/

== Frame Processing and Prediction ==
loop Until End of Stream
VM -> VM: retrieve frame from stream 拉流影片 /' Capture frame from video stream '/
VM -> VM: process_frame() if self.predictFlag is True/' Start card prediction on the frame '/
VM -> DET: do_predict_one_label() /' Use detector instance to predict frame '/
DET -> VM: predict_suits, predict_cardval, score /' return card suits and value, and its confidence score '/
VM -> DM: send_prediction(add to resultlist) DataMgrInstance().addResultlist() /' prediction added to resultlist, waiting to be responded to remote'/
VM -> VM: save prediction img to local disk for debugging/retraining if save_predictions(我自訂義的) is True

VM -> VM: display_frame() 這邊是顯示在UI的邏輯，包含要偵測的框格，現在要偵測的框格、當前gmcode等/' display current detect situation to the UI window '/
VM -> VM: drawBestResult2() 存大圖 if save_full_image(我自訂義的) is True /' Draw the best result on the frame. '/
end

== DataManager回傳結果給遠端荷官端的處理邏輯 DataMgrInstance().addResultlist() ==
alt Valid result list
DM -> DM: addResultlistNoLock(gmcode, resultlist) /' Add results without lock '/

loop for result in resultlist(result = CardInfo)
DM -> DM: addCardNolock() /' 將CardInfo存成Cardlist形式 , 使用mapcard來辨認是第幾張牌, index 表 第幾張牌 mapcard = {1: cardlist1, 2: cardlist2, 3:cardlist3, ...., 6: cardlist6} '/

DM -> DM: cardlist.addcardEx(card) /' cardlist長怎樣去看cardlist.py, 大致上來說，就是根據每一張牌位(index)，裡面儲存一個result list,代表該牌位 的 預測結果序列 '/
DM -> DM: if cardlist.CardNum >= cfg.detecttimes, then check_resultEx() /' 當該牌位的預測牌數 超過detecttimes時(默認為5) '/
DM -> DM: check_resultEx() -> getsendResultNolock() 判斷發牌，這邊邏輯比較複雜，參考datamanager.py /' getsendResultNolock 當 addCardEx超過次數時(默認10次，代表該牌位儲存的預測結果超過10張時 '/
end
DM -> DL: senddata(resultlist) 判斷發牌的結果如果有結果，則藉由DealerClient傳到remote荷官端 /' Send processed results back to DealerClient '/
DL -> DC: sendDetectionResults(bestResult) 藉由DealerClient傳到remote荷官端
end

@enduml